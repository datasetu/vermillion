#!/bin/bash

cd ../api-server
wget https://repo1.maven.org/maven2/org/jacoco/org.jacoco.agent/0.8.6/org.jacoco.agent-0.8.6-runtime.jar
cd ../setup
set -a
set -e
dirname=`dirname $0`
cd $dirname

#Initialise few constants
OWNER="rbccps-iisc"
REPO="vermillion"
APISERVER_PATH="../api-server/target"
APISERVER_JAR="api-server-fat.jar"
AUTH_PATH="../authenticator/target"
AUTH_JAR="authenticator-fat.jar"
DEFINITIONS_FILE="../conf/rabbitmq/definitions.json"
CONF_FILE="vermillion.conf"

if ! hash "jq" &>/dev/null; then

    	if [ "$(uname)" == "Darwin" ]; then
		brew install jq
	elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
		sudo apt -y install jq
	else
		echo "OS not supported"
		exit 1
	fi
fi

function encode_password()
{
	SALT=$(od -A n -t x -N 4 /dev/urandom)
    	PASS=$SALT$(echo -n $1 | xxd -ps | tr -d '\n' | tr -d ' ')

    	if [ "$(uname)" == "Darwin" ]; then
		PASS=$(echo -n $PASS | xxd -r -p | shasum -a 256 | head -c 128)
	elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
		PASS=$(echo -n $PASS | xxd -r -p | sha256sum | head -c 128)
	else
		echo "OS not supported"
		exit 1
	fi
	
    	passwd_hash=$(echo -n $SALT$PASS | xxd -r -p | base64 | tr -d '\n')
}

#Read vermillion.conf
source vermillion.conf

if [ "$(uname)" == "Darwin" ]; then
	generate_key="head /dev/urandom | shasum | cut -f1 -d' '"
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
	generate_key="head /dev/urandom | sha1sum | cut -f1 -d' '"
else
	echo "OS not supported"
	exit 1
fi

if [ -z $RABBITMQ_ADMIN_PASS ]; then
	
	RABBITMQ_ADMIN_PASS="$(eval $generate_key)"
	sed -i'.bak' -e "s/RABBITMQ_ADMIN_PASS=/RABBITMQ_ADMIN_PASS=$RABBITMQ_ADMIN_PASS/" $CONF_FILE
fi

if [ -z $REDIS_PASSWORD ]; then
	
	REDIS_PASSWORD="$(eval $generate_key)"
	sed -i'.bak' -e "s/REDIS_PASSWORD=/REDIS_PASSWORD=$REDIS_PASSWORD/" $CONF_FILE
fi

if [ -z $POSTGRES_PASSWORD ]; then
	
	POSTGRES_PASSWORD="$(eval $generate_key)"
	sed -i'.bak' -e "s/POSTGRES_PASSWORD=/POSTGRES_PASSWORD=$POSTGRES_PASSWORD/" $CONF_FILE
fi

if [ -z "$SERVER_NAME" ]; then
	
	#TODO: Think of another way to do this
	#Get the IP address of the first network interface
	#On production systems, give the domain name as the server name 
	SERVER_NAME="$(ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)"

	#If the machine is not connected to any network interface
	if [ -z "$SERVER_NAME" ]; then
	    SERVER_NAME="127.0.0.1"
	fi

	sed -i'.bak' -e "s/SERVER_NAME=/SERVER_NAME=$SERVER_NAME/" $CONF_FILE
fi

encode_password $RABBITMQ_ADMIN_PASS

tmp=$(mktemp)
jq --arg a "$passwd_hash" '.users[].password_hash = $a' $DEFINITIONS_FILE > "$tmp" && mv "$tmp" $DEFINITIONS_FILE
chmod 644 $DEFINITIONS_FILE

if [ $RUN_ONLY == "true" ]; then

	if  [ ! -f $APISERVER_PATH/$APISERVER_JAR ]	||  \
	    [ ! -f $AUTH_PATH/$AUTH_JAR ]
	then
	    echo "Downloading jar files from the latest release..." >&2
	    curl -s https://api.github.com/repos/$OWNER/$REPO/releases/latest \
	    | grep browser_download_url | cut -d '"' -f 4 | xargs curl -LJ# > jars.tar.gz
	
	    tar -zxf jars.tar.gz
	    mkdir -p $APISERVER_PATH
	    mkdir -p $AUTH_PATH
	    mv jars/$APISERVER_JAR  $APISERVER_PATH
	    mv jars/$AUTH_JAR $AUTH_PATH
	    rm -rf jars
	    rm jars.tar.gz
	fi
fi

#Generate all necessary certificates
(cd ../datasetu-ca && ./gen-certs.sh)
 
docker-compose -f docker-compose.yml -f docker-compose.kibana.yml -f docker-compose.auth.yml down --remove-orphans -v

DOCKER_OPTS=""
if [ $USE_KIBANA == "true" ]; then
	DOCKER_OPTS=$DOCKER_OPTS"-f docker-compose.kibana.yml"
fi
if [ $AUTH_SERVER == "auth.local" ]; then
	DOCKER_OPTS=$DOCKER_OPTS" -f docker-compose.auth.yml"
fi

docker-compose -f docker-compose.yml $DOCKER_OPTS up --remove-orphans -d

#Remove unnecessary backup files
rm -f vermillion.conf.bak


