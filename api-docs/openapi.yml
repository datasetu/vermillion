openapi: 3.1.0
info:
  version: 1.0.0
  title: Vermilllion API Documentation
  termsOfService: 'https://example.com/terms/'
  contact:
    email: pct960@gmail.com
    url: 'https://vermillion.datasetu.org'
  license:
    name: datasetu
    url: 'https://github.com/datasetu/vermillion/blob/master/LICENSE'
  x-logo:
    url: 'https://github.com/datasetu/vermillion/raw/master/images/logo.png'
    backgroundColor: "#FFFFFF"
    altText: "Vermillion logo"
  description: Vermillion is a high-performance, scalable and secure open-source data exchange platform developed using Vertx. It is a general-purpose resource-server that data providers and consumers can use to exchange time-series as well as static datasets. Vermillion exposes a simple search interface that can be used to query resources using various parameters like time, geo-coordinates, full-text or any combination thereof.

tags:
  - name: Consumer
    description: A data consumer is any user or entity which is interested in a data resource that vermillion hosts (or acts as a intermediary for). Consumers discover resources on the datasetu catalogue and use the search interface to query the datasets

  - name: Provider
    description: A data provider is any user or entity which is responsible for a dataset that vermillion hosts. Providers can be data owners or have delegated access to act as custodians for resources. Providers upload details, access mechanisms, license and other metadata of resources onto the datasetu catalogue. Also, they manage access control rules for their resources on the datasetu auth server. Providers use the publish interface of Vermillion to upload datasets and dynamic metadata associated with it.

servers:
  - url: 'https://vermillion.datasetu.org'

paths:
  /download?id=RESOURCE_ID&token=ACCESS_TOKEN:
    get:
      tags:
       - Consumer
      description: This endpoint is meant for downloading secure file datasets for which access has been obtained beforehand. If the fully-qualified resource ID is known then this endpoint can be invoked from programs or from user-agents like ``curl``. Otherwise, invoking the endpoint with just an access token will bring up an HTML page containing a list of datasets the consumer had requested for. Furthermore, this API can be used in two modes. In the first mode, a specific resource ID or a specific set of resource IDs can be requested (a subset of the resources that the token has authorisation to). They will be then be made available on the consumer's directory which can be downloaded. In the second mode, the consumer can simply pass an access token, and all resources that the token has authorisation to will be made available in the consumer's directory. The pre-condition for the second mode is that the token presented must not have authorisation to heterogenous resources, i.e., a mixture of time-series datasets and files (or files residing on other resource servers). The ``download`` API merely performs the function of symlinking the requested resources to the consumer's directory. Once the symlinks are created, this API internally redirects to the ``/consumer/`` API.
      operationId: download
      security:
        - datasetu-auth-server: [read]
      parameters:
        - name: ACCESS_TOKEN
          in: query
          required: true
          description: A token granted by the datasetu auth server to access resources.
          schema:
            type: string
            example: "auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e153"
          allowReserved: true
        - name: RESOURCE_ID
          in: query
          description: A fully qualified resource name obtained from the datasetu catalogue. One or more resource IDs can be specified in this API. In the latter case, the resource IDs need to be separated by a comma. 
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b
            /example.com/test-category/test-resource.public"
          allowReserved: true
      responses:
        200:
          description: The file symlinks have been created and the consumer is successfully redirected to the ``/consumer`` API. Depending on the depth of the requested ID (how many elements of the full resource ID), a top-level folder, a list of files, or the contents of a specific file can be displayed.
          content:
            text/plain:
              schema:
                type: string
              example: This is a sample text from a file.
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/FORBIDDEN'
        500:
          $ref: '#/components/responses/INTERNAL-SERVER'

  /latest?id=RESOURCE_ID&token=ACCESS_TOKEN:
    get:
      tags:
        - Consumer
      description: This API is for getting the latest datapoint of a resource. This is typically meant to be used on time-series datasets. However, it could be used to query the latest metadata of static files as well. It supports both open and secure datasets. An access token is required in the latter case.
      operationId: latest
      security:
        - datasetu-auth-server: [read]
      parameters:
        - name: RESOURCE_ID
          in: query
          required: true
          description: A fully qualified resource name obtained from the datasetu catalogue.
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b
            /example.com/test-category/test-resource"
          allowReserved: true
        - name: ACCESS_TOKEN
          in: query
          required: false
          description: An access token granted by the datasetu auth server
          schema:
            type: string
            example: "auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      responses:
        200:
          description: The latest data of the requested resource is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/latest'
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/FORBIDDEN'
        500:
          $ref: '#/components/responses/INTERNAL-SERVER'

  /publish?id=RESOURCE_ID&token=ACCESS_TOKEN:
    post:
      tags:
        - Provider
      description: This endpoint gives providers access to publish data into vermillion. Resource ID and access token are mandatory parameters. This API can be used to publish either time series data or static files. Depending on the mode, the request will have to be either application/json or multipart/form-data.
      operationId: publish
      security:
        - datasetu-auth-server: [write]
      parameters:
        - name: RESOURCE_ID
          in: query
          required: true
          description: A fully qualified resource name obtained from the datasetu catalogue.
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b
            /example.com/test-category/test-resource"
          allowReserved: true
        - name: ACCESS_TOKEN
          in: query
          required: true
          description: An access token granted by the datasetu auth server
          schema:
            type: string
            example: "auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      requestBody:
        description: |
          As mentioned previously, this API can be used to publish time series data or static files. The request will vary depending on the mode used.
          #### Publish-timeSeriesData
          Time-series data in JSON, formatted as per the schema specified below.

          #### Publish-staticData
          Any file that the provider wishes to host on Vermillion

        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publish-timeSeriesData'

          multipart/form-data:
            schema:
              $ref: '#/components/schemas/publish-staticData'

      responses:
         201:
           description: 201 created
           content:
              text/plain:
                schema:
                  type: string
                example: Ok
         400:
           $ref: '#/components/responses/BAD-REQUEST'
         404:
           $ref: '#/components/responses/NOT-FOUND'
         403:
           $ref: '#/components/responses/FORBIDDEN'
         500:
           $ref: '#/components/responses/INTERNAL-SERVER'

  /search/scroll?token=ACCESS_TOKEN:
    post:
      tags:
        - Consumer
      description: Scroll API gives all the datasets in chunks of specified size. The size determines the pagination of data points and it is to be defined in search API. Prior to this, search API should be hit to obtain scroll_id.
      operationId: scrolled-search
      security:
        - datasetu-auth-server: [ read ]
      parameters:
        - name: ACCESS_TOKEN
          in: query
          required: false
          description: An access token granted by the datasetu auth server
          schema:
            type: string
            example: "auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                scroll_id:
                  type: string
                  description: This is the scroll Id associated with data.
                  example: FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFDFXVGpZbmdCLXVCbkdFcEk3TFF1AAAAAAAAAAIWZWNVMWdVVkVUNHlub1kzdldYR2d3Zw==
                scroll_duration:
                  type: string
                  description: The time duration specified/requested to scroll in and around the data
                  example: 30m
              required:
                - scroll_id
                - scroll_duration

      responses:
        200:
          description: Lists down all the hits of scroll-search
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/scroll-search'
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        500:
          $ref: '#/components/responses/INTERNAL-SERVER'
  /search?token=ACCESS_TOKEN:
    post:
      tags:
        - Consumer
      description: This API provides a search interface for the data hosted on vermillion. Both public and secure datasets can be queried using this API, with an access token being required in the latter case. This interface provides options to query using time, geo-spatial co-ordinates, text or any combination thereof. Resource Id is a mandatory field across all search types. Along with the resource ID, at least one of the other three parameters is necessary for the search query.
      operationId: Search
      security: 
        - datasetu-auth-server: [read]
      parameters:
        - name: ACCESS_TOKEN
          in: query
          required: false
          description: A token granted by the datasetu auth server to access resources.
          schema:
            type: string
            example: "auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/time-series'
                - $ref: '#/components/schemas/geo-spatial'
                - $ref: '#/components/schemas/attribute-search'
                - $ref: '#/components/schemas/complex-search'

        description: |
          The following lists the various filters which can be used in the search API. A filter can be clubbed with any other filter to perform a complex search.
          #### Time-series Search
          This can be used to query resources using a time-based filter.
          #### Geo-spatial Search
          This can be used to query resources using a geo-spatial filter, i.e., using geo co-ordinates.
          #### Attribute Search
          This can be used to query resources using a text-based or numeric filter.
          #### Complex Search
          When one or more of the above filters are used, all of them are applied while querying the DB. <br/><br/>

      responses:
        200:
          description: The data from requested resources as a JSON array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search'
        400:
          $ref: '#/components/responses/BAD-REQUEST'
        404:
          $ref: '#/components/responses/NOT-FOUND'
        403:
          $ref: '#/components/responses/FORBIDDEN'
        500:
         $ref: '#/components/responses/INTERNAL-SERVER'
  /consumer/ACCESS_TOKEN:
    get:
      tags:
        - Consumer
      description: This API is for consumers to get access to secure file datasets of providers. The pre-requisite to invoke this API is to invoke the ``/download`` API. The latter will create symlinks for the requested datasets in the consumer's directory. This API can be used on a browser in which case an HTML page containing the folders is returned. Alternatively, it could also be invoked from a user-agent such as ``curl`` if the fully qualified resource ID is known.
      operationId: consumer
      security:
        - datasetu-auth-server: [read]
      parameters:
        - name: ACCESS_TOKEN
          in: path
          required: true
          description: A token granted by the datasetu auth server to access resources. In the above example, the endpoint the consumer needs to invoke would be ``/consumer/auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179``. In this case, the consumer will NOT be able to browse parent directories of their folders unlike the case with the ``/provider/public`` API.
          schema:
            type: string
            example: "auth.datasetu.org/36a83204ea6ad6690a0eccda0f37e179"
          allowReserved: true
      responses:
        200:
          description: Consumer sees all the files/datasets that they had requested for previously using the download API
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
              example: secure-resource-1  secure-resource-2
        404:
          $ref: '#/components/responses/NOT-FOUND'

  /provider/public/RESOURCE_ID:
    get:
      tags:
        - Consumer
      description: This API allows a consumer to browse files/datasets that providers have made available publicly. This API can be used on a browser in which case an HTML page containing the folders is returned. Alternatively, it could also be invoked from a user-agent such as ``curl`` if the fully qualified resource ID is known.
      operationId: provider
      security:
        - datasetu-auth-server: [read]
      parameters:
        - name: RESOURCE_ID
          in: path
          required: false
          description: A fully qualified resource name obtained from the datasetu catalogue. In the above resource ID, the full path to access the file is ``/provider/public/rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource``. Furthermore, if a consumer wants to explore all publicly available datasets, they can simply invoke the ``/provider/public`` endpoint which will display publicly available datasets from all providers (of that Vermillion instance)
          schema:
            type: string
            example: "rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource"
          allowReserved: true
      responses:
        200:
          description: Consumer sees one or more public files/datasets that a provider has made available publicly.
          content:
            text/plain:
              schema:
                type: string
                items:
                  type: string
              example: rbccps.org, iisc.com

security:
  - datasetu-auth-server:
      - read
      - write
components:
  securitySchemes:
    datasetu-auth-server:
      type: apiKey
      in: query
      name: token
      scopes:
        read: Grants read access to resources
        write: Grants write access to resources
      description: The datasetu-auth-server is the authentication, authorisation and accounting (AAA) server of Datasetu. Data providers can set fine-grained access control policies to regulate access to their resources/datasets. Data consumers can request access tokens to get access to resources. For more information please refer to [Datasetu Auth Server](https://datasetu.github.io/auth/index.html) documentation. Access on a resource could be granted by providers using a ``read`` scope or a ``write`` scope. In the ``read`` scope, consumers will be able to invoke read-related APIs on the datasets. In the ``write`` scope, consumers will be able to invoke APIs that "write" to the resource. All APIs except publish need a ``read`` scope. The publish API needs a ``write`` scope for invocation.
      scheme: custom

  schemas:
    scroll-search:
      type: object
      properties:
        hits:
          type: object
          description: This is the number of hits of data points of the resource in JSON format.
          properties:
            data:
              type: object
              description: This can be any free-form data of the resource in JSON format.
              example: { "data": { "Project": "Vermillion","ApiDocs": "Redoc", "Definition": "OpenAPI" } }
            timestamp:
              type: string
              description: Timestamp at which the data was recorded.
              example: '2021-03-03T10:18:00.952628Z'
            id:
              type: string
              description: A fully qualified id of the resource.
              example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
            category:
              type: string
              description: A broad category into which resourceId/data falls into.
              example: test-category
            co-ordinates:
              type: array
              description: An array of co-ordinates in [longitude, latitude] format.
              example: [ '56.9', '76.5' ]
            mime-type:
              type: string
              example: application/json
        scroll_id:
          type: string
          example: FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFDFXVGpZbmdCLXVCbkdFcEk3TFF1AAAAAAAAAAIWZWNVMWdVVkVUNHlub1kzdldYR2d3Zw==
          description: This is the scroll Id associated with data.
    publish-timeSeriesData:
      type: object
      properties:
        timestamp:
          type: string
          description: An optional parameter to indicate the relevant timestamp of the resource (created, modified etc.). When not specified, this field defaults to the time at which the data was published.
          example: '2021-03-03T10:18:00.952628Z'
        data:
          type: object
          description: A mandatory field that contains the data of the resource. This is encased in the ``data`` field to allow for uniform searchability.
          example: {"data" : { "PM10" : {"value": "70", "unit": "micrograms per cubic metre"}}}
        coordinates:
          type: array
          items:
            type: string
          description: An array of co-ordinates specified as [longitude, latitude].
          example: [ '56.898989', '67.4939' ]
      required:
        - data
    publish-staticData:
      properties:
        file:
          description: The file that needs to be published
          type: string
          format: binary
          example: 'War_and_Peace.pdf'
        metadata:
          description: Metadata of the uploaded file as a json.
          type: string
          format: binary
          example: 'metadata.json'
    resourceId-array:
      type: array
      items:
        type: string
        description: A json array of resourceIds.
      example: ['rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public', 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource-1']
    resourceId:
      description: A fully qualified resource name obtained from the datasetu catalogue. If the resource ID or a set of resource IDs do not end with '.public', then the query should compulsorily have an access token.
      type: string
      example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
    time-series:
      type: object
      properties:
        id:
          oneOf:
            - $ref: '#/components/schemas/resourceId'
            - $ref: '#/components/schemas/resourceId-array'
        time:
          type: object
          $ref: '#/components/schemas/time'
        scroll_duration:
          type: string
          description: The time duration specified/requested for the ES context to be alive and subsequently to scroll in & around the data
          example: 60m
        size:
          type: integer
          description: The number of hits that consumer is interested in.
          example: 3
      required:
        - id
        - time
    geo-spatial:
      type: object
      properties:
        id:
          oneOf:
            - $ref: '#/components/schemas/resourceId'
            - $ref: '#/components/schemas/resourceId-array'
        geoDistance:
          type: object
          $ref: '#/components/schemas/geoDistance'
        scroll_duration:
          type: string
          description: The time duration specified/requested for the ES context to be alive and subsequently to scroll in & around the data
          example: 60m
        size:
          type: integer
          description: The number of hits that consumer is interested in.
          example: 6
      required:
        - id
        - geoDistance
    attribute-search:
      type: object
      properties:
        attribute:
          oneOf:  #If one-of has schemas of type object then give the description here itself. If description is given in subsequent schema object it wont work.
            - $ref: '#/components/schemas/attribute-text'
            - $ref: '#/components/schemas/attribute-numeric'
          description: |
            In the 'attribute-text' based search, ``term`` & ``value`` parameters are mandatory and in the 'attribute-numeric' based search, ``term``, ``min`` & ``max`` keys are mandatory. The text search is for filtering using a text-key and a text-value. E.g. 
            ```
            {"term": "car-type", "value": "sedan"} 
            ```
            The 'attribute-numeric' search is for searching over text-keys and numeric-values. E.g. 
            ```
            {"term": "speed", "min": 50, "max": 60}
            ```
        id:
          oneOf:
            - $ref: '#/components/schemas/resourceId'
            - $ref: '#/components/schemas/resourceId-array'
        scroll_duration:
          type: string
          description: The time duration specified/requested for the ES context to be alive and subsequently to scroll in & around the data
          example: 60m
        size:
          type: integer
          description: The number of hits that consumer is interested in.
          example: 9
      required:
        - id
        - attribute
    complex-search:
      description: This is the example of complex search which uses all combination of time-series, geo-spatial & attribute based search.
      type: object
      properties:
        id:
          oneOf:
            - $ref: '#/components/schemas/resourceId'
            - $ref: '#/components/schemas/resourceId-array'
        attribute:
          type: object
          description: Attribute is a json object which has three sub parts/keys - min, max and term. For a text filter, ``term`` and ``value`` are sufficient. For searching on a numeric value, ``term``, ``min`` and ``max`` are necessary.
          oneOf:
            - $ref: '#/components/schemas/attribute-text'
            - $ref: '#/components/schemas/attribute-numeric'
        time:
          type: object
          description: Time is a jsonObject containing start and end timestamps
          $ref: '#/components/schemas/time'
        geo-spatial:
          type: object
          description: A JSON object containing centre coordinates and the distance (radius) for the search
          properties:
            id:
              oneOf:
                - $ref: '#/components/schemas/resourceId'
                - $ref: '#/components/schemas/resourceId-array'
            geoDistance:
              type: object
              $ref: '#/components/schemas/geoDistance'
          required:
            - id
            - geoDistance
        scroll_duration:
          type: string
          description: The time duration specified/requested for the ES context to be alive and subsequently to scroll in & around the data
          example: 60m
        size:
          type: integer
          description: The number of hits that consumer is interested in.
          example: 3
      required:
        - id

    download:
      description: Schema for the download API
      type: string
      example: This is a test-string

    latest:
      description: schema for latest data
      type: object
      properties:
        data:
          type: object
          description: The data from the resource.
          example: { "data": { "Project": "Vermillion","ApiDocs": "Redoc", "Definition": "OpenAPI" } }
        timestamp:
          type: string
          description: Timestamp of the datapoint. If left empty while publishing, it defaults to the time of publish
          example: '2021-03-05T10:18:00.952628Z'
        id:
          type: string
          description: Resource ID of the dataset.
          example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
        category:
          type: string
          description: The broad category into which the data stream from a resource falls into.
          example: test-category

    search:
      description: schema for search API response.
      type: object
      properties:
        hits:
          type: object
          description: This is the number of hits of data of the resource in JSON format.
          properties:
            data:
              type: object
              description: This can be any free-form data of the resource in JSON format.
              example: {"data": {"Project": "Vermillion","ApiDocs": "Redoc", "Definition": "OpenAPI"}}
            timestamp:
              type: string
              description: Timestamp at which the data was recorded.
              example: '2021-03-03T10:18:00.952628Z'
            id:
              type: string
              description: A fully qualified id of the resource.
              example: 'rbccps.org/e096b3abef24b99383d9bd28e9b8c89cfd50be0b/example.com/test-category/test-resource.public'
            category:
              type: string
              description: A broad category into which resourceId/data falls into.
              example: test-category
            co-ordinates:
              type: array
              description: An array of co-ordinates in [longitude, latitude] format.
              example: [ '56.9', '76.5' ]
            mime-type:
              type: string
              example: application/json
        scroll_id:
          type: string
          example: FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFDFXVGpZbmdCLXVCbkdFcEk3TFF1AAAAAAAAAAIWZWNVMWdVVkVUNHlub1kzdldYR2d3Zw==
          description: This is the scroll Id associated with data.
    attribute-numeric:
      type: object
      properties:
        term:
          type: string
          example: 'speed'
          description: Term can be any JSON key that is present in the dataset that needs to be searched for.
        min:
          type: string
          example: '30'
          description: The minimum numeric value of the term that the consumer is interested in.
        max:
          type: string
          example: '60'
          description: The maximum numeric value of the term that the consumer is interested in.
      required:
        - term
        - min
        - max
    attribute-text:
      type: object
      properties:
        term:
          type: string
          example: 'car-type'
          description: Term can be any key that is present in the dataset that needs to be searched for.
        value:
          type: string
          example: 'SUV'
          description: The specific value of the term that the consumer is interested in.
      required:
        - term
        - value
    geoDistance:
      description: Used to perform a circular geo-spatial search with the specified co-ordinates as the center and distance as the radius of the circle. Returns all the resources (with other filters applied, if any) lying inside the circle.
      type: object
      properties:
        co-ordinates:
          type: array
          example: ['82.9739', '25.3176']
          description: An array of co-ordinates specified as [longitude, latitude].
        distance:
          type: string
          example: '600m'
          description: Distance should be specified in metres.
      required:
        - co-ordinates
        - distance
    time:
      description: A jsonObject specifying the start and end times.
      type: object
      properties:
        start:
          type: string
          example: '2021-02-3'
          description: Starting timestamp of the time filter. It could be in any valid time format.
        end:
          type: string
          example: '2021-03-3'
          description: Ending timestamp of the time filter. It could be in any valid time format.
      required:
        - start
        - end

  responses:
    BAD-REQUEST:
      description: The request is malformed. One or more required parameters are invalid in the request.
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: '400'
              message:
                type: string
                example: 'Invalid Request'
            required:
              - code
              - message
    NOT-FOUND:
      description: The requested resource/endpoint is not found on the server.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '404'
                message:
                  type: string
                  example: 'Data not found'
            required:
              - code
              - message
    FORBIDDEN:
      description: Access to the requested resource(s) is forbidden due to invalid token or inadequate permissions.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '403'
                message:
                  type: string
                  example: 'Forbidden'
            required:
              - code
              - message
    INTERNAL-SERVER:
      description: The resource server currently is unable to handle the request. Please try again.
      content:
        application/json:
          schema:
            type: object
            properties:
                code:
                  type: string
                  example: '500'
                message:
                  type: string
                  example: 'Internal server'
            required:
              - code
              - message
